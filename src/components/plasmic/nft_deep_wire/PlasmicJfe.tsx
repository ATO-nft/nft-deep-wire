// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: j5CDP9MgqbRapi7mxENKQG
// Component: FxeHyubbo0Q8o
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: a9hmcfoqSQcWZ/component

import { useScreenVariants as useScreenVariantsi1EpI54Sd5XS4R } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: i1epI54SD5xS4r/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_nft_deep_wire.module.css"; // plasmic-import: j5CDP9MgqbRapi7mxENKQG/projectcss
import sty from "./PlasmicJfe.module.css"; // plasmic-import: FxeHyubbo0Q8o/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: SpSM8I8Z8pYH6F/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: GDo5sayAt37nOm/icon
import allegoryOfAgoraphobiajpgRqpfMjqq1 from "./images/allegoryOfAgoraphobiajpg.jpeg"; // plasmic-import: rqpfMjqq1/picture
import countingTheDaysjpgSKtYnwe46 from "./images/countingTheDaysjpg.jpeg"; // plasmic-import: sKTYnwe46/picture
import underTheWatchfulEyejpg6A39Mu0MO from "./images/underTheWatchfulEyejpg.jpeg"; // plasmic-import: 6a39mu0mO/picture

export type PlasmicJfe__VariantMembers = {};

export type PlasmicJfe__VariantsArgs = {};
type VariantPropType = keyof PlasmicJfe__VariantsArgs;
export const PlasmicJfe__VariantProps = new Array<VariantPropType>();

export type PlasmicJfe__ArgsType = {};
type ArgPropType = keyof PlasmicJfe__ArgsType;
export const PlasmicJfe__ArgProps = new Array<ArgPropType>();

export type PlasmicJfe__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  connect?: p.Flex<typeof Button>;
  h1?: p.Flex<"h1">;
  h4?: p.Flex<"h4">;
  h5?: p.Flex<"h5">;
  footer?: p.Flex<"div">;
};

export interface DefaultJfeProps {
  className?: string;
}

function PlasmicJfe__RenderFunc(props: {
  variants: PlasmicJfe__VariantsArgs;
  args: PlasmicJfe__ArgsType;
  overrides: PlasmicJfe__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsi1EpI54Sd5XS4R()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__hlEc)}>
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__fqldf
                )}
                href={`/`}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"NDW"}
                  </span>
                </React.Fragment>
              </a>
            </div>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___5Yf5)}>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__vnZfn
                  )}
                  href={`/`}
                >
                  {"About"}
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__zzKHv
                  )}
                  href={`/artist`}
                >
                  {"Artists"}
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__ayMbu
                  )}
                  href={`/`}
                >
                  {"Vision"}
                </a>

                <Button
                  data-plasmic-name={"connect"}
                  data-plasmic-override={overrides.connect}
                  className={classNames("__wab_instance", sty.connect)}
                >
                  {"Connect"}
                </Button>
              </div>
            ) : null}
          </div>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__cjltg)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"Collection #1"}
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"Artworks"}
                    </span>
                  </React.Fragment>
                )}
              </h1>

              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__s9HKl
                )}
                href={`/nft`}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__vlZsc)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: allegoryOfAgoraphobiajpgRqpfMjqq1,
                    fullWidth: 6030,
                    fullHeight: 3930,
                    aspectRatio: undefined
                  }}
                />
              </a>

              <h4
                data-plasmic-name={"h4"}
                data-plasmic-override={overrides.h4}
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"by "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"Jesus Fernandez Escobar"}
                  </span>
                </React.Fragment>
              </h4>

              <h5
                data-plasmic-name={"h5"}
                data-plasmic-override={overrides.h5}
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5
                )}
              >
                {
                  "There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. "
                }
              </h5>

              <div className={classNames(projectcss.all, sty.freeBox__erWwe)}>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__de7Ke
                  )}
                  href={`/nft`}
                >
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__bVx7G)}
                    displayHeight={"180px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: allegoryOfAgoraphobiajpgRqpfMjqq1,
                      fullWidth: 6030,
                      fullHeight: 3930,
                      aspectRatio: undefined
                    }}
                  />
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mkv8O
                  )}
                  href={`/nft`}
                >
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__ikLjw)}
                    displayHeight={"180px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: countingTheDaysjpgSKtYnwe46,
                      fullWidth: 3641,
                      fullHeight: 5446,
                      aspectRatio: undefined
                    }}
                  />
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mpdVj
                  )}
                  href={`/nft`}
                >
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__d0Gzt)}
                    displayHeight={"180px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: underTheWatchfulEyejpg6A39Mu0MO,
                      fullWidth: 5080,
                      fullHeight: 3798,
                      aspectRatio: undefined
                    }}
                  />
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__neO0K
                  )}
                  href={`/nft`}
                >
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__wGhu2)}
                    displayHeight={"180px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: underTheWatchfulEyejpg6A39Mu0MO,
                      fullWidth: 5080,
                      fullHeight: 3798,
                      aspectRatio: undefined
                    }}
                  />
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__gjIe
                  )}
                  href={`/nft`}
                >
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__qoBZe)}
                    displayHeight={"180px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: underTheWatchfulEyejpg6A39Mu0MO,
                      fullWidth: 5080,
                      fullHeight: 3798,
                      aspectRatio: undefined
                    }}
                  />
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__wF3Xv
                  )}
                  href={`/nft`}
                >
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__dT548)}
                    displayHeight={"180px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: underTheWatchfulEyejpg6A39Mu0MO,
                      fullWidth: 5080,
                      fullHeight: 3798,
                      aspectRatio: undefined
                    }}
                  />
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__xJteJ
                  )}
                  href={`/nft`}
                >
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__xqXpu)}
                    displayHeight={"180px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: underTheWatchfulEyejpg6A39Mu0MO,
                      fullWidth: 5080,
                      fullHeight: 3798,
                      aspectRatio: undefined
                    }}
                  />
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___3Vne6
                  )}
                  href={`/nft`}
                >
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__iVCgr)}
                    displayHeight={"180px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: underTheWatchfulEyejpg6A39Mu0MO,
                      fullWidth: 5080,
                      fullHeight: 3798,
                      aspectRatio: undefined
                    }}
                  />
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__zCk3Y
                  )}
                  href={`/nft`}
                >
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__cAea6)}
                    displayHeight={"180px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: underTheWatchfulEyejpg6A39Mu0MO,
                      fullWidth: 5080,
                      fullHeight: 3798,
                      aspectRatio: undefined
                    }}
                  />
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mVleu
                  )}
                  href={`/nft`}
                >
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__kOZe)}
                    displayHeight={"180px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: underTheWatchfulEyejpg6A39Mu0MO,
                      fullWidth: 5080,
                      fullHeight: 3798,
                      aspectRatio: undefined
                    }}
                  />
                </a>
              </div>
            </div>
          ) : null}

          <div
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___1P6Zt)}>
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___421
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "NFT Deep Wire\nAll rights reserved © 2022"
                  : "NFT Deep Wire | All rights reserved © 2022"}
              </a>
            </div>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__lIrig)}>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__pYeqH
                  )}
                  href={`/`}
                >
                  {"Terms & conditions"}
                </a>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__wQi3N
                    )}
                  >
                    {"Contact us"}
                  </a>
                ) : null}
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "connect", "h1", "h4", "h5", "footer"],
  header: ["header", "connect"],
  connect: ["connect"],
  h1: ["h1"],
  h4: ["h4"],
  h5: ["h5"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  connect: typeof Button;
  h1: "h1";
  h4: "h4";
  h5: "h5";
  footer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicJfe__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicJfe__VariantsArgs;
    args?: PlasmicJfe__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicJfe__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicJfe__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicJfe__ArgProps,
          internalVariantPropNames: PlasmicJfe__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicJfe__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicJfe";
  } else {
    func.displayName = `PlasmicJfe.${nodeName}`;
  }
  return func;
}

export const PlasmicJfe = Object.assign(
  // Top-level PlasmicJfe renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    connect: makeNodeComponent("connect"),
    h1: makeNodeComponent("h1"),
    h4: makeNodeComponent("h4"),
    h5: makeNodeComponent("h5"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicJfe
    internalVariantProps: PlasmicJfe__VariantProps,
    internalArgProps: PlasmicJfe__ArgProps
  }
);

export default PlasmicJfe;
/* prettier-ignore-end */
