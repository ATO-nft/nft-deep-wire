// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: j5CDP9MgqbRapi7mxENKQG
// Component: FxeHyubbo0Q8o
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: a9hmcfoqSQcWZ/component
import TextInput from "../../TextInput"; // plasmic-import: 0jfYEX-SfGn8K/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import BidButton from "../../BidButton"; // plasmic-import: TW0Ca_Ns9A2yO/component

import { useScreenVariants as useScreenVariantsi1EpI54Sd5XS4R } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: i1epI54SD5xS4r/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_nft_deep_wire.module.css"; // plasmic-import: j5CDP9MgqbRapi7mxENKQG/projectcss
import sty from "./PlasmicJfe.module.css"; // plasmic-import: FxeHyubbo0Q8o/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: SpSM8I8Z8pYH6F/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: GDo5sayAt37nOm/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: awgxW5ZUPDKTds/icon
import captureDecran20220525A200826PngXUdItNoqUxIjj4 from "./images/captureDecran20220525A200826Png.png"; // plasmic-import: xUdITNoqUxIjj4/picture

export type PlasmicJfe__VariantMembers = {};

export type PlasmicJfe__VariantsArgs = {};
type VariantPropType = keyof PlasmicJfe__VariantsArgs;
export const PlasmicJfe__VariantProps = new Array<VariantPropType>();

export type PlasmicJfe__ArgsType = {};
type ArgPropType = keyof PlasmicJfe__ArgsType;
export const PlasmicJfe__ArgProps = new Array<ArgPropType>();

export type PlasmicJfe__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  header?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  h5?: p.Flex<"h5">;
  textInput?: p.Flex<typeof TextInput>;
  bidButton?: p.Flex<typeof BidButton>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultJfeProps {
  className?: string;
}

function PlasmicJfe__RenderFunc(props: {
  variants: PlasmicJfe__VariantsArgs;
  args: PlasmicJfe__ArgsType;
  overrides: PlasmicJfe__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsi1EpI54Sd5XS4R()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__o34S8)}>
              {true ? (
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"softRed" as const}
                  link={`/`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__m0Jd3
                    )}
                  >
                    {"Back"}
                  </div>
                </Button>
              ) : null}

              <div
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames(projectcss.all, sty.header)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__a69Bw)}>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__ebJq8
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"NDW"}
                      </span>
                    </React.Fragment>
                  </a>
                </div>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3GNf1)}
                  >
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___8Zcp
                      )}
                    >
                      {"About"}
                    </a>

                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__hsjUj
                      )}
                    >
                      {"Artists"}
                    </a>

                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__rhNwf
                      )}
                    >
                      {"Vision"}
                    </a>

                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__wNtje
                      )}
                    >
                      {"Login"}
                    </a>
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__cjltg)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"Collection #1"}
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"Collection #1"}
                    </span>
                  </React.Fragment>
                )}
              </h1>

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__vlZsc)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: captureDecran20220525A200826PngXUdItNoqUxIjj4,
                  fullWidth: 1232,
                  fullHeight: 1172,
                  aspectRatio: undefined
                }}
              />

              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4__mo9G
                )}
              >
                {"by Jean-Michel Plastic"}
              </h4>

              <h5
                data-plasmic-name={"h5"}
                data-plasmic-override={overrides.h5}
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5
                )}
              >
                {
                  "There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. There will always be some text here. "
                }
              </h5>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tOis6
                )}
              >
                {"00:00:00:08"}
              </div>

              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__fBdqA)}>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__psNdf)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bilLr
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"4,230"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {" "}
                          </span>
                          <React.Fragment>{"MATIC"}</React.Fragment>
                        </React.Fragment>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m5BdF
                        )}
                      >
                        {"Current highest bid "}
                      </div>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__isT8D)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"38.79%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      loading={"lazy" as const}
                      src={{
                        src: captureDecran20220525A200826PngXUdItNoqUxIjj4,
                        fullWidth: 1232,
                        fullHeight: 1172,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                </div>
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9IAe4
                )}
              >
                {"(0 USD eq.)"}
              </div>

              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                className={classNames("__wab_instance", sty.textInput)}
                color={"dark" as const}
                placeholder={"Your offer" as const}
              />

              <Reveal
                className={classNames("__wab_instance", sty.reveal__yRb6X)}
                duration={3000 as const}
                effect={"fade" as const}
                triggerOnce={true}
              >
                <BidButton
                  data-plasmic-name={"bidButton"}
                  data-plasmic-override={overrides.bidButton}
                  className={classNames("__wab_instance", sty.bidButton)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eeJuy
                    )}
                  >
                    {"Bid"}
                  </div>
                </BidButton>
              </Reveal>

              <Reveal
                className={classNames("__wab_instance", sty.reveal__zGr3J)}
                effect={"flip" as const}
                triggerOnce={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g74ZX
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"You're currently the highest bidder "}
                    </span>
                    <React.Fragment>{"✅"}</React.Fragment>
                  </React.Fragment>
                </div>
              </Reveal>

              <h4
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4__aZMl3
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"Previous bids"}
                  </span>
                </React.Fragment>
              </h4>

              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__u3AJa
                )}
                href={
                  "https://etherscan.io/tx/0x6c74bca6ad4f417ffaa892f0d20b055b2f915a83d5c47a1ed736686aac65e0e8" as const
                }
                target={"_blank" as const}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {
                      "May-27-2022 04:35:28 PM +UTC                                                                                                   3,600 MATIC"
                    }
                  </span>
                </React.Fragment>
              </a>

              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__czSnM
                )}
                href={
                  "https://etherscan.io/tx/0x6c74bca6ad4f417ffaa892f0d20b055b2f915a83d5c47a1ed736686aac65e0e8" as const
                }
                target={"_blank" as const}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {
                      "May-27-2022 04:35:28 PM +UTC                                                                                                   3,500 MATIC"
                    }
                  </span>
                </React.Fragment>
              </a>

              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___8MXns
                )}
                href={
                  "https://etherscan.io/tx/0x6c74bca6ad4f417ffaa892f0d20b055b2f915a83d5c47a1ed736686aac65e0e8" as const
                }
                target={"_blank" as const}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {
                      "May-27-2022 04:35:28 PM +UTC                                                                                                   2,000 MATIC"
                    }
                  </span>
                </React.Fragment>
              </a>

              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__nn7Ji
                )}
                href={
                  "https://etherscan.io/tx/0x6c74bca6ad4f417ffaa892f0d20b055b2f915a83d5c47a1ed736686aac65e0e8" as const
                }
                target={"_blank" as const}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {
                      "May-27-2022 04:35:28 PM +UTC                                                                                                   1,000 MATIC"
                    }
                  </span>
                </React.Fragment>
              </a>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "header",
    "h1",
    "h5",
    "textInput",
    "textbox",
    "bidButton"
  ],
  button: ["button"],
  header: ["header"],
  h1: ["h1"],
  h5: ["h5"],
  textInput: ["textInput", "textbox"],
  bidButton: ["bidButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  header: "div";
  h1: "h1";
  h5: "h5";
  textInput: typeof TextInput;
  bidButton: typeof BidButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicJfe__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicJfe__VariantsArgs;
    args?: PlasmicJfe__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicJfe__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicJfe__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicJfe__ArgProps,
          internalVariantPropNames: PlasmicJfe__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicJfe__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicJfe";
  } else {
    func.displayName = `PlasmicJfe.${nodeName}`;
  }
  return func;
}

export const PlasmicJfe = Object.assign(
  // Top-level PlasmicJfe renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    header: makeNodeComponent("header"),
    h1: makeNodeComponent("h1"),
    h5: makeNodeComponent("h5"),
    textInput: makeNodeComponent("textInput"),
    bidButton: makeNodeComponent("bidButton"),

    // Metadata about props expected for PlasmicJfe
    internalVariantProps: PlasmicJfe__VariantProps,
    internalArgProps: PlasmicJfe__ArgProps
  }
);

export default PlasmicJfe;
/* prettier-ignore-end */
