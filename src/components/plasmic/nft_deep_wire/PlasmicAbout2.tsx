// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: j5CDP9MgqbRapi7mxENKQG
// Component: Y2jNpTsOMwD
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: a9hmcfoqSQcWZ/component

import { useScreenVariants as useScreenVariantsi1EpI54Sd5XS4R } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: i1epI54SD5xS4r/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_nft_deep_wire.module.css"; // plasmic-import: j5CDP9MgqbRapi7mxENKQG/projectcss
import sty from "./PlasmicAbout2.module.css"; // plasmic-import: Y2jNpTsOMwD/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: SpSM8I8Z8pYH6F/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: GDo5sayAt37nOm/icon

export type PlasmicAbout2__VariantMembers = {};

export type PlasmicAbout2__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbout2__VariantsArgs;
export const PlasmicAbout2__VariantProps = new Array<VariantPropType>();

export type PlasmicAbout2__ArgsType = {};
type ArgPropType = keyof PlasmicAbout2__ArgsType;
export const PlasmicAbout2__ArgProps = new Array<ArgPropType>();

export type PlasmicAbout2__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  connect?: p.Flex<typeof Button>;
  h1?: p.Flex<"h1">;
  h5?: p.Flex<"h5">;
  footer?: p.Flex<"div">;
};

export interface DefaultAbout2Props {
  className?: string;
}

function PlasmicAbout2__RenderFunc(props: {
  variants: PlasmicAbout2__VariantsArgs;
  args: PlasmicAbout2__ArgsType;
  overrides: PlasmicAbout2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsi1EpI54Sd5XS4R()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__odDrj)}>
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__pgHzY
                )}
                href={`/`}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"NDW"}
                  </span>
                </React.Fragment>
              </a>
            </div>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___5UmWq)}>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__chFiw
                  )}
                  href={`/`}
                >
                  {"About"}
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__nkcT
                  )}
                  href={`/`}
                >
                  {"Artists"}
                </a>

                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__lx0I
                  )}
                  href={`/`}
                >
                  {"Vision"}
                </a>

                <Button
                  data-plasmic-name={"connect"}
                  data-plasmic-override={overrides.connect}
                  className={classNames("__wab_instance", sty.connect)}
                >
                  {"Connect"}
                </Button>
              </div>
            ) : null}
          </div>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__cbXPz)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"Collection #1"}
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"About"}
                    </span>
                  </React.Fragment>
                )}
              </h1>

              <h5
                data-plasmic-name={"h5"}
                data-plasmic-override={overrides.h5}
                className={classNames(
                  projectcss.all,
                  projectcss.h5,
                  projectcss.__wab_text,
                  sty.h5
                )}
              >
                {
                  "About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire.\n\nAbout the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire.\n\nAbout the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire.\n\nAbout the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire. About the NFT Deep Wire."
                }
              </h5>
            </div>
          ) : null}

          <div
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__xscma)}>
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__fl2K3
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "NFT Deep Wire\nAll rights reserved © 2022"
                  : "NFT Deep Wire | All rights reserved © 2022"}
              </a>
            </div>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__kNmc)}>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__vxrRf
                  )}
                  href={`/`}
                >
                  {"Terms & conditions"}
                </a>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__oYUha
                    )}
                  >
                    {"Contact us"}
                  </a>
                ) : null}
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "connect", "h1", "h5", "footer"],
  header: ["header", "connect"],
  connect: ["connect"],
  h1: ["h1"],
  h5: ["h5"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  connect: typeof Button;
  h1: "h1";
  h5: "h5";
  footer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbout2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbout2__VariantsArgs;
    args?: PlasmicAbout2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbout2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAbout2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAbout2__ArgProps,
          internalVariantPropNames: PlasmicAbout2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAbout2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout2";
  } else {
    func.displayName = `PlasmicAbout2.${nodeName}`;
  }
  return func;
}

export const PlasmicAbout2 = Object.assign(
  // Top-level PlasmicAbout2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    connect: makeNodeComponent("connect"),
    h1: makeNodeComponent("h1"),
    h5: makeNodeComponent("h5"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAbout2
    internalVariantProps: PlasmicAbout2__VariantProps,
    internalArgProps: PlasmicAbout2__ArgProps
  }
);

export default PlasmicAbout2;
/* prettier-ignore-end */
